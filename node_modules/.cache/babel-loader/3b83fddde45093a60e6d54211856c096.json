{"ast":null,"code":"var clientId='366387033df94efb9fc7466882437dcd';var redirectUri='http://marunouchisrv.surge.sh/';var spotifyUrl=\"https://accounts.spotify.com/authorize?response_type=token&scope=playlist-modify-public&client_id=\".concat(clientId,\"&redirect_uri=\").concat(redirectUri);var accessToken=undefined;var expiresIn=undefined;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}var urlAccessToken=window.location.href.match(/access_token=([^&]*)/);var urlExpiresIn=window.location.href.match(/expires_in=([^&]*)/);if(urlAccessToken&&urlExpiresIn){accessToken=urlAccessToken[1];expiresIn=urlExpiresIn[1];window.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');}else{window.location=spotifyUrl;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){if(response.ok){return response.json();}else{console.log('API request failed');}}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri,cover:track.album.images[2].url,preview:track.preview_url};});});},savePlaylist:function savePlaylist(name,trackUris){if(!name||!trackUris||trackUris.length===0)return;var userUrl='https://api.spotify.com/v1/me';var headers={Authorization:\"Bearer \".concat(accessToken)};var userId=undefined;var playlistId=undefined;fetch(userUrl,{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){return userId=jsonResponse.id;}).then(function(){var createPlaylistUrl=\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\");fetch(createPlaylistUrl,{method:'POST',headers:headers,body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){return playlistId=jsonResponse.id;}).then(function(){var addPlaylistTracksUrl=\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\");fetch(addPlaylistTracksUrl,{method:'POST',headers:headers,body:JSON.stringify({uris:trackUris})});});});}};export default Spotify;","map":{"version":3,"sources":["/Users/itg/Jamming/src/util/Spotify.js"],"names":["clientId","redirectUri","spotifyUrl","accessToken","undefined","expiresIn","Spotify","getAccessToken","urlAccessToken","window","location","href","match","urlExpiresIn","setTimeout","history","pushState","search","term","fetch","headers","Authorization","then","response","ok","json","console","log","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","cover","images","url","preview","preview_url","savePlaylist","trackUris","length","userUrl","userId","playlistId","createPlaylistUrl","method","body","JSON","stringify","addPlaylistTracksUrl","uris"],"mappings":"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","sourcesContent":["const clientId = '366387033df94efb9fc7466882437dcd';\nconst redirectUri = 'http://marunouchisrv.surge.sh/';\nconst spotifyUrl = `https://accounts.spotify.com/authorize?response_type=token&scope=playlist-modify-public&client_id=${clientId}&redirect_uri=${redirectUri}`;\nlet accessToken = undefined;\nlet expiresIn = undefined;\n\n\nconst Spotify = {\n    getAccessToken() {\n      if (accessToken) {\n        return accessToken;\n      }\n      const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n      const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken[1];\n        expiresIn = urlExpiresIn[1];\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n      } else {\n        window.location = spotifyUrl;\n      }\n    },\n  \n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(\n            response => { \n                if (response.ok) {\n                    return response.json();\n                } else {\n                    console.log('API request failed');\n                }\n        }).then(\n            jsonResponse => {\n            if(!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri,\n                cover: track.album.images[2].url,\n                preview: track.preview_url\n            }));\n        });\n    },\n  \n    savePlaylist(name, trackUris) {\n      if (!name || !trackUris || trackUris.length === 0) return;\n      const userUrl = 'https://api.spotify.com/v1/me';\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userId = undefined;\n      let playlistId = undefined;\n      fetch(userUrl, {\n        headers: headers \n      })\n      .then(response => response.json())\n      .then(jsonResponse => userId = jsonResponse.id)\n      .then(() => {\n        const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n        fetch(createPlaylistUrl, {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify({\n              name: name\n            })\n          })\n          .then(response => response.json())\n          .then(jsonResponse => playlistId = jsonResponse.id)\n          .then(() => {\n            const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n            fetch(addPlaylistTracksUrl, {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify({\n                uris: trackUris\n              })\n            });\n          })\n      })\n    }\n  };\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}