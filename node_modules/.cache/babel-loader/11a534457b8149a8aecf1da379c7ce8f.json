{"ast":null,"code":"const clientId = '366387033df94efb9fc7466882437dcd';\nconst redirectUri = 'http://marunouchisrv.surge.sh/';\nconst spotifyUrl = `https://accounts.spotify.com/authorize?response_type=token&scope=playlist-modify-public&client_id=${clientId}&redirect_uri=${redirectUri}`;\nlet accessToken = undefined;\nlet expiresIn = undefined;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (urlAccessToken && urlExpiresIn) {\n      accessToken = urlAccessToken[1];\n      expiresIn = urlExpiresIn[1];\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n    } else {\n      window.location = spotifyUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        console.log('API request failed');\n      }\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri,\n        cover: track.album.images[2].url,\n        preview: track.preview_url\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris || trackUris.length === 0) return;\n    const userUrl = 'https://api.spotify.com/v1/me';\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId = undefined;\n    let playlistId = undefined;\n    fetch(userUrl, {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => userId = jsonResponse.id).then(() => {\n      const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n      fetch(createPlaylistUrl, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => playlistId = jsonResponse.id).then(() => {\n        const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n        fetch(addPlaylistTracksUrl, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/itg/Jamming/src/util/Spotify.js"],"names":["clientId","redirectUri","spotifyUrl","accessToken","undefined","expiresIn","Spotify","getAccessToken","urlAccessToken","window","location","href","match","urlExpiresIn","setTimeout","history","pushState","search","term","fetch","headers","Authorization","then","response","ok","json","console","log","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","cover","images","url","preview","preview_url","savePlaylist","trackUris","length","userUrl","userId","playlistId","createPlaylistUrl","method","body","JSON","stringify","addPlaylistTracksUrl","uris"],"mappings":"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","sourcesContent":["const clientId = '366387033df94efb9fc7466882437dcd';\nconst redirectUri = 'http://marunouchisrv.surge.sh/';\nconst spotifyUrl = `https://accounts.spotify.com/authorize?response_type=token&scope=playlist-modify-public&client_id=${clientId}&redirect_uri=${redirectUri}`;\nlet accessToken = undefined;\nlet expiresIn = undefined;\n\n\nconst Spotify = {\n    getAccessToken() {\n      if (accessToken) {\n        return accessToken;\n      }\n      const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n      const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken[1];\n        expiresIn = urlExpiresIn[1];\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n      } else {\n        window.location = spotifyUrl;\n      }\n    },\n  \n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(\n            response => { \n                if (response.ok) {\n                    return response.json();\n                } else {\n                    console.log('API request failed');\n                }\n        }).then(\n            jsonResponse => {\n            if(!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri,\n                cover: track.album.images[2].url,\n                preview: track.preview_url\n            }));\n        });\n    },\n  \n    savePlaylist(name, trackUris) {\n      if (!name || !trackUris || trackUris.length === 0) return;\n      const userUrl = 'https://api.spotify.com/v1/me';\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userId = undefined;\n      let playlistId = undefined;\n      fetch(userUrl, {\n        headers: headers \n      })\n      .then(response => response.json())\n      .then(jsonResponse => userId = jsonResponse.id)\n      .then(() => {\n        const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n        fetch(createPlaylistUrl, {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify({\n              name: name\n            })\n          })\n          .then(response => response.json())\n          .then(jsonResponse => playlistId = jsonResponse.id)\n          .then(() => {\n            const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n            fetch(addPlaylistTracksUrl, {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify({\n                uris: trackUris\n              })\n            });\n          })\n      })\n    }\n  };\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}