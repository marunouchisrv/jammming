{"ast":null,"code":"var clientId='366387033df94efb9fc7466882437dcd';var redirectUri='http://marunouchisrv.surge.sh/';var spotifyUrl=\"https://accounts.spotify.com/authorize?response_type=token&scope=playlist-modify-public&client_id=\".concat(clientId,\"&redirect_uri=\").concat(redirectUri);var accessToken=undefined;var expiresIn=undefined;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}var urlAccessToken=window.location.href.match(/access_token=([^&]*)/);var urlExpiresIn=window.location.href.match(/expires_in=([^&]*)/);if(urlAccessToken&&urlExpiresIn){accessToken=urlAccessToken[1];expiresIn=urlExpiresIn[1];window.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');}else{window.location=spotifyUrl;}},search:function search(term){var searchUrl=\"https://api.spotify.com/v1/search?type=track&q=\".concat(term.replace(' ','%20'));return fetch(searchUrl,{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks)return[];return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},savePlaylist:function savePlaylist(name,trackUris){if(!name||!trackUris||trackUris.length===0)return;var userUrl='https://api.spotify.com/v1/me';var headers={Authorization:\"Bearer \".concat(accessToken)};var userId=undefined;var playlistId=undefined;fetch(userUrl,{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){return userId=jsonResponse.id;}).then(function(){var createPlaylistUrl=\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\");fetch(createPlaylistUrl,{method:'POST',headers:headers,body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){return playlistId=jsonResponse.id;}).then(function(){var addPlaylistTracksUrl=\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\");fetch(addPlaylistTracksUrl,{method:'POST',headers:headers,body:JSON.stringify({uris:trackUris})});});});}};export default Spotify;","map":{"version":3,"sources":["/Users/itg/Jamming/src/util/Spotify.js"],"names":["clientId","redirectUri","spotifyUrl","accessToken","undefined","expiresIn","Spotify","getAccessToken","urlAccessToken","window","location","href","match","urlExpiresIn","setTimeout","history","pushState","search","term","searchUrl","replace","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userUrl","userId","playlistId","createPlaylistUrl","method","body","JSON","stringify","addPlaylistTracksUrl","uris"],"mappings":"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","sourcesContent":["const clientId = '366387033df94efb9fc7466882437dcd';\nconst redirectUri = 'http://marunouchisrv.surge.sh/';\nconst spotifyUrl = `https://accounts.spotify.com/authorize?response_type=token&scope=playlist-modify-public&client_id=${clientId}&redirect_uri=${redirectUri}`;\nlet accessToken = undefined;\nlet expiresIn = undefined;\n\n\nconst Spotify = {\n    getAccessToken() {\n      if (accessToken) {\n        return accessToken;\n      }\n      const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n      const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken[1];\n        expiresIn = urlExpiresIn[1];\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n      } else {\n        window.location = spotifyUrl;\n      }\n    },\n  \n    search(term) {\n      const searchUrl = `https://api.spotify.com/v1/search?type=track&q=${term.replace(' ', '%20')}`;\n      return fetch(searchUrl, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        })\n        .then(response => response.json())\n        .then(jsonResponse => {\n          if (!jsonResponse.tracks) return [];\n          return jsonResponse.tracks.items.map(track => {\n            return {\n              id: track.id,\n              name: track.name,\n              artist: track.artists[0].name,\n              album: track.album.name,\n              uri: track.uri\n            }\n          })\n        });\n    },\n  \n    savePlaylist(name, trackUris) {\n      if (!name || !trackUris || trackUris.length === 0) return;\n      const userUrl = 'https://api.spotify.com/v1/me';\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userId = undefined;\n      let playlistId = undefined;\n      fetch(userUrl, {\n        headers: headers \n      })\n      .then(response => response.json())\n      .then(jsonResponse => userId = jsonResponse.id)\n      .then(() => {\n        const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n        fetch(createPlaylistUrl, {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify({\n              name: name\n            })\n          })\n          .then(response => response.json())\n          .then(jsonResponse => playlistId = jsonResponse.id)\n          .then(() => {\n            const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n            fetch(addPlaylistTracksUrl, {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify({\n                uris: trackUris\n              })\n            });\n          })\n      })\n    }\n  };\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}